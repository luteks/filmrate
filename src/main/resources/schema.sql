DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;

CREATE TABLE IF NOT EXISTS mpa_rating (
  rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(10) NOT NULL UNIQUE
 );

CREATE TABLE IF NOT EXISTS genres (
  genre_id int PRIMARY KEY,
  name varchar(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS directors (
    director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(25) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
  film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(255) NOT NULL,
  description varchar(200) NOT NULL,
  release_date date NOT NULL,
  duration int NOT NULL,
  rating_id int REFERENCES mpa_rating (rating_id) ON DELETE RESTRICT,
  director_id int REFERENCES directors(director_id) ON DELETE SET NUll
);

CREATE TABLE IF NOT EXISTS film_genres (
  film_id bigint REFERENCES films (film_id) ON DELETE CASCADE,
  genre_id int REFERENCES genres (genre_id) ON DELETE RESTRICT,
  PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar(255) NOT NULL,
  login varchar(255) NOT NULL,
  name varchar(255) NOT NULL,
  birthday date NOT NULL
);

CREATE TABLE IF NOT EXISTS friendship (
  user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
  friend_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes (
  user_id bigint REFERENCES users (user_id) ON DELETE CASCADE,
  film_id bigint REFERENCES films (film_id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, film_id)
);

CREATE INDEX IF NOT EXISTS friendship_reverse ON friendship (friend_id, user_id);

CREATE INDEX IF NOT EXISTS likes_reverse ON likes (film_id, user_id);

COMMIT;
